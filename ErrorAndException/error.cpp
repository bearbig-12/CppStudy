#include <iostream>

// 예외처리

	// 예외 발생
		// 프래그래머가 예외 상황을 인지해서 예외를 던진다(throw)

	// 예외 탐지 ~ 예외 처리
		// 함수를 try 해보고 예외를 catch해서 처리

//--------------------------------------------------------------------

// 테스트

	// 함수의 특정 입력 -> 출력 올바른지 몇 번 테스트
	// 단위 테스트 (Unit Test)

//--------------------------------------------------------------------

// 디버깅

	// 1. 빌드 -> 실행 파일
	// 2. 의도한 대로 작동하는지 확인
		// a. 의도대로 작동하지 않으면 = BUG
		// b. 코드 분석
		// c. 이상한 부분 수정

// 버그가 발생해도 원일을 쉽게 찾을 수 있도록 준비
	// 적절한 주석
	// 변수명을 잘 만들기
	// 일관된 코딩 
	// 너무 긴 코드는 피하기 (한 페이지)
	// 모든 걸 직접 만들지 말기 ( 표준 라이브러리 사용)

//--------------------------------------------------------------------

//버그를 찾아서 해결

	// 잘못된 결과 <- 입력(조건)
		// 재연 버그는 이미 죽은 버그
	// 비정상 동작 함수를 추려냄
	// 입력평가 ( 사전 조건 )
	// 결과평가 ( 사후 조건 )
	// 오류를 찾아서 수정
	// 테스트


double LinearEquation(int a, int b)
{
	//callee
	if (a == 0)
	{
		throw std::logic_error("Divide by 0");
	}
	return -(double(b) / a);
}

int main()
{
	int a{}, b{};

	std::cin >> a >> b;

	//caller
	try
	{
		std::cout << LinearEquation(a, b);
	}
	catch (std::logic_error)
	{
		std::cerr << "divide by 0 !" << std::endl;
	}

	//try
	//{
	//	//your code
	//}
	//catch (std::exception e)
	//{
	//	std::cerr << "error : " << e.what() << std::endl;
	//}
}